1. product 테이블 수정
prodnum -> varchar 변경 , 책 코드 
detail -> varchar -> 1000으로 변경
--------------------------------------------------
2. qna 테이블 수정
kind, lookup 컬럼 추가
review 테이블 comnum 삭제	
--------------------------------------------------
3 .댓글 내용 저장을 위한 테이블 추가
comment 테이블 (notic -> comment)
comidx	INT	            댓글 인덱스	not null	primary key(1씩 자동증가)(cascade)
email 	VARCHAR(50)	회원 이메일	not null	foreign key for member(email)(cascade)
prodnum	VARCHAR(50)	상품 번호	            not null	foreign key for product(prodnum)(cascade)
comnum	INT	            댓글 번호	            not null	
content	VARCHAR(500)	댓글 내용	            not null	
comdate	DATETIME	날짜		
--------------------------------------------------

4. 다음등급 하는거 승급하는거
브론드 0~20 , 실버20~50 , 골드 50이상
--------------------------------------------------
addreservesfunction, subreservesfunction 함수 수정 ( 프로시저 사용이 안될때 사용)
WHERE m.email = f_email -> WHERE m.email = o.email
--------------------------------------------------
orderresultadd 프로시저 생성

// 변수선언
DECLARE result INT;
DECLARE payprice INT;
DECLARE advanresult VARCHAR(50) CHARSET UTF8;
// 현재적립금 = 보유적립금 - 사용적립금 - 추가적립금
set result = (SELECT m.reserves-o.usereserves+o.addreserves FROM member m, `order` o WHERE m.email = o.email AND o.detailnum = f_detailnum);
// 총결제금액 + 현재결제금액
set payprice = (SELECT m.totalprice+o.payprice FROM member m, `order` o WHERE m.email = o.email and detailnum = f_detailnum);
// 총결제금액 수정
UPDATE member SET totalprice = payprice WHERE email = f_email;
// 총결제금액별 랭크 반환값
SET advanresult = (SELECT case when totalprice < 200000 then "브론즈"
	                            when totalprice >= 200000 AND totalprice < 500000 then "실버"
                               when totalprice >= 500000 then "골드"
                               END FROM member WHERE email = f_email);
//반환된 랭크값 수정
UPDATE member SET RANK = advanresult, reserves = result WHERE email = f_email;
--------------------------------------------------
스프링에서 프로시져 사용법에 관한 내용 참고
https://stove99.tistory.com/78

----------------------------------------------------------------------------------------------------
5.회원정보제이슨 적립금추가

----------------------------------------------------------------------------------------------------
6. pay 수정 (varchar ) 카드, 네이버, 카카오
order 테이블 - pay smallint -> varchar(50) 수정


----------------------------------------------------------------------------------------------------
7. 오더케이블에 배송 요청사항 추가
7.1 order 테이블 
name   VARCHAR(20)  받는분 성함	
phone  VARCHAR(20)  받는분 전화번호
request varchar(50)     추가(경비실, 문앞, 무인택배함, 직접수령, 기타)
----------------------------------------------------------------------------------------------------
7.2 order mapper 수정 및 추가
7.2.1 주문내역 관리자 수정
order_update_admin
-> result(상품처리내역), delivery 수정 - 관리자가 주문상태 배송상태 변경 시

7.2.2 주문내역 회원 수정
order_update_email
-> address(배송지주소), request(요청사항) - 회원들이 수정할 내용

7.2.3 주문 추가 부분 수정
order_insert 
-> name, phone, address, request 추가 및 수정
----------------------------------------------------------------------------------------------------

8. 테스트페이지에 적립금 볼수있게 추가하기


----------------------------------------------------------------------------------------------------
9. 리뷰테이블 작업
9.1 상품별 리뷰 목록
prod_review_list
prodnum	검색 -> 
상품명(name), 회원이메일, 리뷰제목, 댓글 수 , 조회수, 추천수, 별점 순으로 리스트됨
SELECT p.name, r.email, r.rename, r.comscore, r.lookup, r.recom, r.grade FROM review r, product p WHERE p.prodnum = #{prodnum}

9.2 회원별 리뷰 목록
email_review_list
email 검색 ->
상품명(name), 회원이메일, 리뷰제목, 댓글 수 , 조회수, 추천수, 별점 순으로 리스트됨
SELECT p.name, r.email, r.rename, r.comscore, r.lookup, r.recom, r.grade FROM review r, product p WHERE r.email = #{email}

9.3 리뷰 조회
review_list
renum, rename(대부분 제목클릭) 검색 -> 둘중하나만 매칭되어도 해당 리뷰 조회
리뷰 리스트 반환
SELECT * FROM review WHERE renum = #{renum} OR `RENAME` = #{rename}

9.4 리뷰 삭제
review_delete
renum 검색
리뷰 삭제
delete from review WHERE renum = #{renum}

9.5 리뷰 수정
review_update
renum, email 검색
rename, content, grade 수정 
UPDATE review SET `rename` = #{rename}, content = #{content}, grade = #{grade} where email = #{email} and renum = #{renum}

9.6 리뷰 등록
review_insert
email, prodnum, rename 
필수 항목 체크 후 DB 저장 
등록 시 리뷰 수, 리뷰점수 content, grade 업데이트 메퍼 실행
INSERT INTO 
review (email, prodnum, `rename`, content, grade) 
VALUES
(#{email}, #{prodnum}, #{rename}, #{content}, #{grade})


9.7 리뷰수
review_count
prodnum
리뷰 등록 시 실행 -> 리뷰 수 반환
UPDATE product SET reviewscore = (SELECT COUNT(*) FROM review WHERE prodnum = "#{prodnum}")

9.8 리뷰점수
review_score
prodnum
리뷰 등록 시 실행 -> 리뷰 점수 평균 반환
update product set review = (SELECT TRUNCATE(AVG(grade),0) FROM review WHERE prodnum = "#{prodnum}")


----------아직 진행 안함
10. 안드에서 받아서 처리해야 하는 데이터
이메일 찾기
비밀번호찾기
회원정보수정
구매추가


