<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources location="/WEB-INF/views/member/" mapping="/member/**" />
	<resources location="/WEB-INF/views/mypage/" mapping="/mypage/**" />
	<resources location="/WEB-INF/views/webtest/" mapping="/webtest/**" />
	<resources location="/WEB-INF/views/css/" mapping="/css/**" />
	<resources location="/WEB-INF/views/fonts/" mapping="/fonts/**" />
	<resources location="/WEB-INF/views/images/" mapping="/images/**" />
	<resources location="/WEB-INF/views/include/" mapping="/include/**" />
	<resources location="/WEB-INF/views/etc/" mapping="/etc/**" />
	<resources location="/WEB-INF/views/books/" mapping="/books/**" />




	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	
	<!-- 패키지 이름 지정하면 애플리케이션 실행 시 해당 패키지에서 애너테이션으로 지정된 클래스를 빈으로 생성 시켜줌  -->
	<context:component-scan base-package="com.example.ex01" />
	
	<!--  인터셉터 : 브라우저 요청이 있을 때 메서드 호출 전후에 특정기능을 수행 할 수 있게 하는 기능
        Filter -> DispatcherServlet  ->  Interceptor -> Controller
     -->
    <!--  인터셉트 클래스 빈 생성 -->
    <beans:bean id="loggerInterceptor" class="com.example.ex01.controller.interceptor.LoggerInterceptor" />
    <beans:bean id="loginInterceptor" class="com.example.ex01.controller.interceptor.LoginInterceptor" />
    <!--  인터셉터 설정 -->
    <mvc:interceptors>
    
        <mvc:interceptor>
            <mvc:mapping path="/**"/><!--  적용할 범위 -->
            <beans:bean class="com.example.ex01.controller.interceptor.ViewNameInterceptor" /><!--  인터셉트 클래스 빈 생성 -->
    	</mvc:interceptor>
    	
    	<mvc:interceptor>
            <mvc:mapping path="/mypage/*"/><!--  적용할 범위 -->
            <beans:ref bean="loggerInterceptor"/>
    	</mvc:interceptor>

        <mvc:interceptor>
            <mvc:mapping path="/mypage/myCart.do"/>
             <mvc:mapping path="/mypage/myList.do"/>
            <beans:ref bean="loginInterceptor"/>
        </mvc:interceptor>

    </mvc:interceptors>
	
	
	
</beans:beans>
